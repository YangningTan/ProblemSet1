---
title: "ProblemSet1"
format: html
editor: visual
author: Yangning Tan
---

## Problem 1 - Wine Data

a\. Import the data

We first import data into the environment. Click the "import Dataset" button and select the file "wine.data". Then we get the data.frame below.

```{r}
wine <- read.csv("wine.data", header = FALSE)
#wine
```

We can also check the format of it.

```{r}
class(wine)
```

Next, we use the information in the "wine.names" file to give column names. We name the first column "class", and the names of following columns are given in the "wine.names" file.

```{r}
colnames(wine)[1] <- "class"
colnames(wine)[2:14] <- c("alcohol", "malic acid", "ash",
                          "Alcalinity of ash", "Magnesium",
                          "Total phenols", "Flavanoids",
                          "Nonflavanoid phenols",
                          "Proanthocyanins", "Color intensity",
                          "Hue", "OD280/OD315 of diluted wines",
                          "Proline")
```

b\. The number of wines within each class

The numbers of wines within the three classes are respectively as follows.

```{r}
# the number of wines within class 1
length(which(wine$class == 1))
# the number of wines within class 2
length(which(wine$class == 2))
# the number of wines within class 3
length(which(wine$class == 3))
```

c\. Use the data to answer the questions

1.  The wine with the highest alcohol content belongs to which class?

    We first find the index of the wine, then find which class it belongs to.

    ```{r}
    index1 <- which.max(wine$alcohol)
    wine$class[index1]
    ```

    Clearly, it belongs to class 1.

2.  The wine with the lowest alcohol content belongs to which class?

    Similarly, we first find the index, then the class it belongs to.

    ```{r}
    index2 <- which.min(wine$alcohol)
    wine$class[index2]
    ```

    It belongs to class 2.

3.  How many of these wines have higher levels of magnesium than 114 mg/l?

    ```{r}
    length(which(wine$Magnesium > 114))
    ```

    There are 26 wines with level of magnesium higher than 114 mg/l.

4.  Within each class, how many wines have higher levels of magnesium than average German beer?

    The number of wines with higher levels of magnesium than average German beer within each class is as follows.

    ```{r}
    # within class 1
    length(which(wine$class == 1 & wine$Magnesium > 114))
    # within class 2
    length(which(wine$class == 2 & wine$Magnesium > 114))
    # within class 3
    length(which(wine$class == 3 & wine$Magnesium > 114))
    ```

d\. Create a table identifying the average value of each variable

We first calculate the overall mean value with respect to each variable.

```{r}
average_overall <- colMeans(wine[2:14])
```

Then we calculate the mean value of each class with respect to each variable.

```{r}
average_class1 <- colMeans(wine[1:59, 2:14])
average_class2 <- colMeans(wine[60:130, 2:14])
average_class3 <- colMeans(wine[131:178 , 2:14])
```

And finally, we combine these mean values together to form a table.

```{r}
average_table <- cbind.data.frame(average_overall, average_class1, average_class2, average_class3)
average_table <- t(average_table)
```

e\. Carry out the t-tests

We first take out the values of ash with regard to the three classes.

```{r}
ash_1 <- wine$ash[1:59]
ash_2 <- wine$ash[60:130]
ash_3 <- wine$ash[131:178]
```

Then we conduct pairwise t-tests to the three sets of data.

```{r}
# t-test for class 1 and class 2
t.test(ash_1, ash_2, var.equal = FALSE)
# t-test for class 1 and class 3
t.test(ash_1, ash_3, var.equal = FALSE)
# t-test for class 2 and class 3
t.test(ash_2, ash_3, var.equal = FALSE)
```

This shows that the level of ash differs between class 1 and class 3.

## Problem 2 - Perfect Power

a\. Write a function "isPerfectPower" to identify whether a given integer is a perfect power for a given power.

```{r}
isPerfectPower <- function(x, p){
  # input: the number to check, the specified power
  root <- round(x^(1/p))
  root_power <- root^p
  if (all.equal(x, root_power) == TRUE){
    return(list(TRUE, root)) 
  } else{
    return (list(FALSE, root))
  }
}
```

b\. Write another function "`findRootPower`" which calls your first function, using a loop to identify both the root and power.

```{r}
findRootPower <- function(x) {
  power <- c()
  for (p in 2:(log2(x))) {
    result <- isPerfectPower(x, p)
    if (result[[1]]) {
      power <- c(power, p)
      break
    }
  }
  if (length(power) == 0) {
    return(paste(x, "is not a Perfect Power."))
  } else {
    return(paste(x, "=", result[2], "^", p))
  }
}
```

Use this new function to identify whether each of the following is a perfect power, and if so what its root and power is.

```{r}
findRootPower(27)
findRootPower(13060694016)
findRootPower(7776)
findRootPower(170859375)
findRootPower(58247422)
findRootPower(94143178827)
```

## Problem 3 - ChatGPT

a\. Put the following prompt into ChatGPT (or your favorite other LLM) and copy its output (both the code it produces as well as any text it generates) into your submission.

The following is the output of ChatGPT.

Sure, here are two R functions that accomplish what you described:

```{r}
# Function to determine the name of a poker hand
get_poker_hand_name <- function(suits, ranks) {
  if (length(unique(ranks)) == 5) {
    # Check for a straight
    if (max(ranks) - min(ranks) == 4) {
      if (length(unique(suits)) == 1) {
        return("Straight Flush")
      } else {
        return("Straight")
      }
    }
    # Check for a flush
    if (length(unique(suits)) == 1) {
      return("Flush")
    }
    return("High Card")
  }
  if (length(unique(ranks)) == 4) {
    return("One Pair")
  }
  if (length(unique(ranks)) == 3) {
    if (max(table(ranks)) == 3) {
      return("Three of a Kind")
    }
    return("Two Pair")
  }
  if (length(unique(ranks)) == 2) {
    if (max(table(ranks)) == 4) {
      return("Four of a Kind")
    }
    return("Full House")
  }
}

# Function to simulate dealing a round of poker
deal_poker_round <- function(num_players) {
  # Define the deck of cards
  suits <- c("Hearts", "Diamonds", "Clubs", "Spades")
  ranks <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, "Jack", "Queen", "King", "Ace")
  
  # Create an empty list to store each player's hand
  hands <- vector("list", length = num_players)
  
  # Shuffle the deck of cards
  deck <- expand.grid(Suit = suits, Rank = ranks)
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal cards to each player
  for (i in 1:num_players) {
    player_hand <- deck[((i - 1) * 5 + 1):(i * 5), ]
    hands[[i]] <- player_hand
    cat("Player", i, "hand:", player_hand$Rank, "of", player_hand$Suit, "\n")
    hand_name <- get_poker_hand_name(player_hand$Suit, player_hand$Rank)
    cat("Player", i, "has a", hand_name, "\n\n")
  }
  
  return(hands)
}
```

This code defines two functions. The first function, **`get_poker_hand_name`**, takes vectors of suits and ranks and determines the name of the poker hand (e.g., "Two Pair," "Flush," etc.). The second function, **`deal_poker_round`**, simulates dealing a round of poker for a specified number of players, showing each player's hand and the name of their hand using the first function.

b\. See if the code runs without modification in R. If so, demonstrate it with a range of inputs. If not, fix it and explain what you fixed.

The code does not run without modification in R. Now we try to fix it.

There are mainly two problems within this code. The first problem is that it fails to assign values to "J, Q, K, A". The second problem is that it ignores the fact that "A" can be viewed as "1" when there is potentially a straight. Thus, we improve the code of the first function as follows.

```{r}
get_poker_hand_name <- function(suits, ranks) {
  # Define a mapping of ranks to numeric values
  rank_mapping <- c("2" = 2, "3" = 3, "4" = 4, "5" = 5, "6" = 6,
                    "7" = 7, "8" = 8, "9" = 9, "10" = 10,
                    "Jack" = 11, "Queen" = 12, "King" = 13, "Ace" = 14)
  
  # Convert ranks to corresponding numeric values
  numeric_ranks <- rank_mapping[as.character(ranks)]
  
  # Check for Ace, 2, 3, 4, 5 straight
  is_straight_ace_low <- all(sort(numeric_ranks) == c(2, 3, 4, 5, 14))
  
  # Special case: Ace, 2, 3, 4, 5 straight with Ace as 1
  if (is_straight_ace_low) {
    numeric_ranks[numeric_ranks == 14] <- 1
  }
  
  # Sort numeric ranks
  sorted_ranks <- sort(numeric_ranks)
  
  if (length(unique(sorted_ranks)) == 5) {
    # Check for a straight
    if (max(sorted_ranks) - min(sorted_ranks) == 4) {
      if (length(unique(suits)) == 1) {
        return("Straight Flush")
      } else {
        return("Straight")
      }
    }
    # Check for a flush
    if (length(unique(suits)) == 1) {
      return("Flush")
    }
    return("High Card")
  }
  if (length(unique(sorted_ranks)) == 4) {
    return("One Pair")
  }
  if (length(unique(sorted_ranks)) == 3) {
    if (max(table(sorted_ranks)) == 3) {
      return("Three of a Kind")
    }
    return("Two Pair")
  }
  if (length(unique(sorted_ranks)) == 2) {
    if (max(table(sorted_ranks)) == 4) {
      return("Four of a Kind")
    }
    return("Full House")
  }
}
```

c\. Explain line-by-line what the code is doing.

```{r}
get_poker_hand_name <- function(suits, ranks) {
  # Define a mapping of ranks to numeric values
  rank_mapping <- c("2" = 2, "3" = 3, "4" = 4, "5" = 5, "6" = 6,
                    "7" = 7, "8" = 8, "9" = 9, "10" = 10,
                    "Jack" = 11, "Queen" = 12, "King" = 13, "Ace" = 14)
  
  # Convert ranks to corresponding numeric values
  numeric_ranks <- rank_mapping[as.character(ranks)]
  
  # Check for Ace, 2, 3, 4, 5 straight
  is_straight_ace_low <- all(sort(numeric_ranks) == c(2, 3, 4, 5, 14))
  
  # Special case: Ace, 2, 3, 4, 5 straight with Ace as 1
  if (is_straight_ace_low) {
    numeric_ranks[numeric_ranks == 14] <- 1
  }
  
  # Sort numeric ranks
  sorted_ranks <- sort(numeric_ranks)
  
  if (length(unique(sorted_ranks)) == 5) {
    # Check for a straight
    if (max(sorted_ranks) - min(sorted_ranks) == 4) {
      if (length(unique(suits)) == 1) {
        return("Straight Flush")
      } else {
        return("Straight")
      }
    }
    # Check for a flush
    if (length(unique(suits)) == 1) {
      return("Flush")
    }
    return("High Card")
  }
  if (length(unique(sorted_ranks)) == 4) {
    return("One Pair")
  }
  if (length(unique(sorted_ranks)) == 3) {
    if (max(table(sorted_ranks)) == 3) {
      return("Three of a Kind")
    }
    return("Two Pair")
  }
  if (length(unique(sorted_ranks)) == 2) {
    if (max(table(sorted_ranks)) == 4) {
      return("Four of a Kind")
    }
    return("Full House")
  }
}

# Function to simulate dealing a round of poker
deal_poker_round <- function(num_players) {
  # Define the deck of cards
  suits <- c("Hearts", "Diamonds", "Clubs", "Spades")
  ranks <- c(2, 3, 4, 5, 6, 7, 8, 9, 10, "Jack", "Queen", "King", "Ace")
  
  # Create an empty list to store each player's hand
  hands <- vector("list", length = num_players)
  
  # Shuffle the deck of cards
  # Create a dataframe from all combinations of the suits and the ranks to yield a matrix representing the 52 different cards.
  deck <- expand.grid(Suit = suits, Rank = ranks) 
  # randomly put the 52 cards into the matrix
  deck <- deck[sample(nrow(deck)), ]
  
  # Deal cards to each player
  for (i in 1:num_players) {
    player_hand <- deck[((i - 1) * 5 + 1):(i * 5), ]
    hands[[i]] <- player_hand
    cat("Player", i, "hand:", player_hand$Rank, "of", player_hand$Suit, "\n")
    hand_name <- get_poker_hand_name(player_hand$Suit, player_hand$Rank)
    cat("Player", i, "has a", hand_name, "\n\n")
  }
  
  return(hands)
}
```

d\. Determine whether the code produces accurate results. Explain how you made this determination. Check at least the following.

-   Are the inputs and outputs as described above?

    Yes.

-   Are the hands valid (e.g. real cards, no duplicates, right number)?

    Yes.

-   Are the names of the hands correct?

    Yes.

-   Does it ensure no duplicates in cards across hands? What happens if you ask for more than 10 hands to be dealt (as there are only 52 cards in a standard deck)?

    ```{r}
    deal_poker_round(11)
    ```

    Only the first ten players can receive a complete hand of 5 cards. Other players can only receive two cards or even nothing.

Include all tests you carry out. (Set a random seed to make the results deterministic for the discussion.)

```{r}
set.seed(123)
deal_poker_round(4)
```

All results seem to be accurate.
